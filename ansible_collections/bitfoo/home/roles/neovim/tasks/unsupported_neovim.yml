- name: UNSUPPORTED NEOVIM | Include neovim vars
  ansible.builtin.include_vars:
    file: "{{ ansible_distribution | lower }}.yml"

- name: UNSUPPORTED NEOVIM | Get latest version
  ansible.builtin.uri:
    url: https://api.github.com/repos/neovim/neovim-releases/releases/latest
    headers: "{{ github_api_headers | to_json(vault_to_text=true) }}"
  register: neovim_latest_release_json
  check_mode: false

- name: UNSUPPORTED NEOVIM | Get current installed version
  ansible.builtin.shell:
    cmd: "set -eo pipefail; {{ xdg_dirs_local_bin }}/nvim --version | head -n 1 | cut -d 'v' -f 2"
  register: neovim_current_version_cmd
  changed_when: false
  failed_when: false
  check_mode: false

- name: UNSUPPORTED NEOVIM | Register latest release version
  ansible.builtin.set_fact:
    neovim_latest_version: "{{ neovim_latest_release_json.json.tag_name.split('v')[1] }}"
    neovim_current_version: "{{ neovim_current_version_cmd.stdout | default('') }}"

- name: UNSUPPORTED NEOVIM | Latest release version
  ansible.builtin.debug:
    var: neovim_latest_version

- name: UNSUPPORTED NEOVIM | Current installed version
  ansible.builtin.debug:
    var: neovim_current_version

- name: UNSUPPORTED NEOVIM | Install or Upgrade neovim
  when:
    - neovim_current_version != neovim_latest_version or neovim_force_install
  block:
    - name: UNSUPPORTED NEOVIM | Create tmp directory
      ansible.builtin.tempfile:
        prefix: neovim_
        state: directory
      register: neovim_tmp_dir
      changed_when: false
      check_mode: false

    - name: UNSUPPORTED NEOVIM | Set release full name
      ansible.builtin.set_fact:
        neovim_full_release_name: "nvim.appimage"
      check_mode: false

    - name: UNSUPPORTED NEOVIM | Download latest release
      ansible.builtin.get_url:
        url: "https://github.com/neovim/neovim-releases/releases/download/\
              v{{ neovim_latest_version }}/{{ neovim_full_release_name }}"
        dest: "{{ neovim_tmp_dir.path }}"
        headers: "{{ github_api_headers | to_json(vault_to_text=true) }}"
        mode: "0640"
      check_mode: false
      changed_when: false
      register: neovim_downloaded_release

    - name: UNSUPPORTED NEOVIM | Copy binary
      ansible.builtin.copy:
        src: "{{ neovim_tmp_dir.path }}/{{ neovim_full_release_name }}"
        dest: "{{ xdg_dirs_local_bin }}/nvim"
        mode: "0750"
      diff: false
  always:
    - name: UNSUPPORTED NEOVIM | Ensure tmp directory is absent
      ansible.builtin.file:
        dest: "{{ neovim_tmp_dir.path }}"
        state: absent
      changed_when: false
      no_log: true
