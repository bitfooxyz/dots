- name: AWS-CLI | Get latest version
  ansible.builtin.uri:
    url: https://api.github.com/repos/aws/aws-cli/tags
    headers: "{{ github_api_headers | to_json(vault_to_text=true) }}"
  register: aws_cli_latest_release_json
  check_mode: false

- name: AWS-CLI | Get current installed version
  ansible.builtin.shell:
    cmd: "set -o pipefail && {{ ansible_user_dir }}/.local/bin/aws --version | cut -d ' ' -f 1 | cut -d '/' -f 2"
  register: aws_cli_current_version_cmd
  changed_when: false
  failed_when: false
  check_mode: false

- name: AWS-CLI | Register latest release version
  ansible.builtin.set_fact:
    aws_cli_latest_version: "{{ aws_cli_latest_release_json.json[0].name }}"
    aws_cli_current_version: "{{ aws_cli_current_version_cmd.stdout }}"

- name: AWS-CLI | Latest release version
  ansible.builtin.debug:
    var: aws_cli_latest_version

- name: AWS-CLI | Current installed version
  ansible.builtin.debug:
    var: aws_cli_current_version

- name: AWS-CLI | Install
  when: aws_cli_current_version != aws_cli_latest_version or coreutils_force_aws_cli
  block:
    - name: AWS-CLI | Create tmp directory
      ansible.builtin.tempfile:
        state: directory
        prefix: aws_cli_
      register: aws_cli_tmp_dir
      check_mode: false

    - name: AWS-CLI | Set release full name
      ansible.builtin.set_fact:
        aws_cli_full_release_name:
          Linux: "awscli-exe-{{ ansible_system | lower }}-{{ ansible_architecture }}-{{ aws_cli_latest_version }}.zip"
          Darwin: "AWSCLIV2-{{ aws_cli_latest_version }}.pkg"

    - name: AWS-CLI | Download aws-cli
      ansible.builtin.get_url:
        url: "https://awscli.amazonaws.com/{{ aws_cli_full_release_name[ansible_system] }}"
        dest: "{{ aws_cli_tmp_dir.path }}"
        mode: "0640"
      register: aws_cli_downloaded_release

    - name: AWS-CLI | Linux specific tasks
      when:
        - not ansible_check_mode
        - ansible_system == "Linux"
      block:
        - name: AWS-CLI | Extract downloaded release archive
          ansible.builtin.unarchive:
            src: "{{ aws_cli_downloaded_release.dest }}"
            dest: "{{ aws_cli_tmp_dir.path }}/"
            mode: "0750"
          no_log: true

        - name: AWS-CLI | Install or update aws-cli
          ansible.builtin.command:
            cmd: "{{ aws_cli_tmp_dir.path }}/aws/install --update --bin-dir {{ xdg_dirs_local_bin }} \
                  --install-dir {{ xdg_dirs_local_share }}/aws-cli"
          register: aws_cli_install_cmd
          changed_when: '"You can now run" in aws_cli_install_cmd.stdout'
          failed_when: aws_cli_install_cmd.rc != 0

        - name: AWS-CLI | Ensure aws and aws_completer scripts are executable
          ansible.builtin.file:
            path: "{{ xdg_dirs_local_bin }}/{{ item }}"
            state: link
            mode: "0750"
          loop:
            - aws
            - aws_completer

    - name: AWS-CLI | MacOS specific tasks
      when:
        - not ansible_check_mode
        - ansible_system == "Darwin"
      block:
        - name: AWS-CLI | Create choises.xml file
          ansible.builtin.template:
            src: aws_cli/choices.xml.j2
            dest: "{{ aws_cli_tmp_dir.path }}/choices.xml"
            mode: "0640"

        - name: AWS-CLI | Install or update aws-cli
          ansible.builtin.command:
            cmd: "installer -pkg {{ aws_cli_tmp_dir.path }}/\
                {{ aws_cli_full_release_name[ansible_system] }} \
                -target CurrentUserHomeDirectory \
                -applyChoiceChangesXML {{ aws_cli_tmp_dir.path }}/choices.xml"
          register: aws_cli_install_cmd
          changed_when: '"The install was successful" in aws_cli_install_cmd.stdout'

        - name: Link tools to ~/.local/bin/
          ansible.builtin.file:
            src: "{{ xdg_dirs_local_share }}/aws-cli/{{ item }}"
            dest: "{{ xdg_dirs_local_bin }}/{{ item }}"
            mode: "0750"
            state: link
          loop:
            - aws
            - aws_completer
  always:
    - name: AWS-CLI | Ensure tmp directory is absent
      ansible.builtin.file:
        dest: "{{ aws_cli_tmp_dir.path }}"
        state: absent
      no_log: true

- name: AWS-CLI | Ensure configuration directory exists
  ansible.builtin.file:
    dest: "{{ ansible_user_dir }}/.aws"
    state: directory
    mode: "0750"

- name: AWS-CLI | Ensure configuration is present
  ansible.builtin.copy:
    src: "aws-cli/{{ item }}"
    dest: "{{ ansible_user_dir }}/.aws/{{ item }}"
    mode: "0600"
  no_log: true
  loop:
    - config
    - credentials
